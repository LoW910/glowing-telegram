@page "/user/add";
@page "/user/edit/{Id}";
@using ElkPrep.Shared;
@inject HttpClient Http;
@inject NavigationManager NavigationManager;

<main class=container>
<EditForm Model=@user OnValidSubmit=@SaveUser class="form-control">
    <DataAnnotationsValidator />
    @if (Id != null)
    {
        <h3>Edit User</h3>
    }
    else
    {
        <h3>Add User</h3>
    }
    <div class="row">
        <div class="col-sm-4">
            <label for="firstName">First Name</label>
            <InputText class="form-control" id="firstName" @bind-Value="user.FirstName" placeholder="First Name"></InputText>
        </div>
        <div class="col-sm-4">
            <label for="lastName">Last Name</label>
            <InputText class="form-control" id="lastName" @bind-Value="user.LastName" placeholder="Last Name"></InputText>
        </div>
        <div class="col-sm-2">
            <label for="age">Age</label>
            <InputNumber class="form-control"  id="age" @bind-Value="user.Age" placeholder="Age"></InputNumber>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Add User</button>
</EditForm>


<EditForm Model=@arrow OnSubmit=@SaveArrow class="form-control">
    <h3>Add Arrow</h3>
    <div class="row">
        <div class="col-sm-2">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="arrow.Name" placeholder="Name"></InputText>
        </div>
        @*<div class="col-sm-4">
            <label for="broadhead">BroadHead</label>
            <InputText class="form-control"  id="broadhead" @bind-Value="arrow.Broadhead" placeholder="Broadhead"></InputText>
        </div>*@
    </div>
    <div class="row">
        <div class="col-sm-2">
            <label for="fletch">Fletchings</label>
            <InputNumber class="form-control" id="fletch" @bind-Value="arrow.Fletch" placeholder="Fletch"></InputNumber>
        </div>

        <div class="col-sm-2">
            <label for="weight">Weight</label>
            <InputNumber class="form-control" id="weight" @bind-Value="arrow.Weight" placeholder="Weight"></InputNumber>
        </div>
        <div class="col-sm-2">
            <label for="length">Length</label>
            <InputNumber class="form-control" id="length" @bind-Value="arrow.Length" placeholder="Length"></InputNumber>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Add Arrow</button>
</EditForm>


<EditForm Model="@bow" OnSubmit=@SaveBow class="form-control">
    <h3>Add Bow</h3>
    <div class="row">
        <div class="col-sm-4">
            <label for="name">Bow Name</label>
            <InputText class="form-control" id="name" @bind-Value="bow.Name" placeholder="Name"></InputText>
        </div>
      <div class="col-sm-4">
            <label for="drawLength">Draw Length</label>
        <InputNumber class="form-control" id="drawLength" @bind-Value="bow.DrawLength" placeholder="Draw Length"></InputNumber>
      </div>
      <div class="col-sm-4">
            <label for="drawWeight">Draw Weight</label>
        <InputNumber class="form-control"  id="drawWeight" @bind-Value="bow.DrawWeight" placeholder="Draw Weight"></InputNumber>
      </div>

    </div>
    <div class="row">
        <div class="col-sm-4">
            <label for="letOff">Let Offh</label>
        <InputNumber class="form-control" id="letOff" @bind-Value="bow.LetOff" placeholder="Let Off"></InputNumber>
      </div>
      <div class="col-sm-4">
            <label for="fps">FPS</label>
        <InputNumber class="form-control"  id="fps" @bind-Value="bow.FPS" placeholder="FPS"></InputNumber>
      </div>
      <div class="col-sm-4">
            <label for="range">Range</label>
        <InputNumber class="form-control"  id="range" @bind-Value="bow.Range" placeholder="Range"></InputNumber>
      </div>

    </div>
    <button class="btn btn-primary" type="submit">Add Bow</button>
</EditForm>
</main>



@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected User user = new();
    protected Arrow arrow = new();
    protected Bow bow = new();


    protected override async Task OnParametersSetAsync()
    {
        //if (Id != null)
        //{
        //    user = await GetUser((int)Id);
        //}
        
    }




    protected async Task SaveUser()
    {

        if (user.Id != 0)
        {
            await Http.PutAsJsonAsync("/api/user/update", user);
            ClearFields();
        }
        else
        {
            await Http.PostAsJsonAsync("/api/user/add", user);
            ClearFields();
        }
    }

    private void ClearFields()
    {
        user.FirstName = string.Empty;
        user.LastName = string.Empty;
        user.Age = 0;
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }



    protected async Task SaveBow()
    {
        if (bow.Id != 0)
        {
            await Http.PutAsJsonAsync("/api/bow/update", bow);
        }
        else
        {
            await Http.PostAsJsonAsync("/api/bow/add", bow);
        }
    }

    protected async Task SaveArrow()
    {
        if (arrow.Id != 0)
        {
            await Http.PutAsJsonAsync("/api/arrow/update", arrow);
        }
        else
        {
            await Http.PostAsJsonAsync("/api/arrow/add", arrow);
        }
    }

}
